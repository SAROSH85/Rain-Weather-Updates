# package.json
{
  "name": "mumbai-rain-monitor",
  "version": "1.0.0",
  "description": "Real-time rainfall monitoring and alerts for Mumbai",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "nodemailer": "^6.9.7",
    "node-cron": "^3.0.2",
    "axios": "^1.6.0",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "engines": {
    "node": "18.x"
  },
  "keywords": ["weather", "mumbai", "rain", "monitoring", "alerts"],
  "author": "Your Name",
  "license": "MIT"
}

---

# .env (Environment Variables Template)
# Copy this to .env and fill in your actual values

# OpenWeatherMap API Key (get from openweathermap.org)
OPENWEATHER_API_KEY=your_openweather_api_key_here

# Telegram Bot Configuration (create bot via @BotFather)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_CHAT_ID=your_telegram_chat_id_here

# Email Configuration (use Gmail App Password)
EMAIL_FROM=your_email@gmail.com
EMAIL_TO=recipient_email@gmail.com
EMAIL_PASS=your_gmail_app_password_here
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587

# Server Configuration
PORT=3000
NODE_ENV=production

---

# Procfile (for Heroku deployment)
web: node server.js

---

# railway.toml (for Railway deployment)
[build]
builder = "NIXPACKS"

[deploy]
startCommand = "node server.js"

---

# Dockerfile (for Docker deployment)
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install --production

COPY . .

EXPOSE 3000

USER node

CMD ["node", "server.js"]

---

# docker-compose.yml
version: '3.8'

services:
  mumbai-rain-monitor:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

---

# .gitignore
node_modules/
.env
*.log
.DS_Store
logs/
dist/
build/